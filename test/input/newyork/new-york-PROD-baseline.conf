include "../common/akka.conf"
include "../common/akka-router.conf"
include "../common/metrics.conf"
include "../common/matsim.conf"

##################################################################
# Agentsim
##################################################################
beam.agentsim.simulationName = "new-york-200k-baseline"

#from 1051k scenario    10k simulation     -> 0.00952
#from 1051k scenario    20k simulation     -> 0.0191
#from 1051k scenario    200k simulation    -> 0.191
#from 1051k scenario    400k simulation    -> 0.381
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.191

beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 10

# PhysSim name (JDEQSim | BPRSim | PARBPRSim | CCHRoutingAssignment)
beam.physsim.name = "JDEQSim"

beam.physsim.speedScalingFactor = 1.0
beam.physsim.maxLinkLengthToApplySpeedScalingFactor = 50
beam.physsim.flowCapacityFactor = 0.02

# rh prices was increased because they are lower than real ones
# prices was multiplied by 2.5
beam.agentsim.agents.rideHail.defaultBaseCost = 4.5         # 1.8
beam.agentsim.agents.rideHail.defaultCostPerMile = 2.275    # 0.91
beam.agentsim.agents.rideHail.defaultCostPerMinute = 0.7    # 0.28
beam.agentsim.agents.rideHail.pooledBaseCost = 4.725        # 1.89
beam.agentsim.agents.rideHail.pooledCostPerMile = 2.775     # 1.11
beam.agentsim.agents.rideHail.pooledCostPerMinute = 0.175   # 0.07

beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = 0.0
beam.agentsim.tuning.transitPrice = 0.0
beam.agentsim.agents.rideHail.initialization.procedural.fractionOfInitialVehicleFleet = 0.02

# 0.023 = 200k / 8336k (NYC population according to wiki)
beam.agentsim.taz.parkingStallCountScalingFactor = 0.03

beam.agentsim.tuning.transitCapacity = 0.06
beam.agentsim.agents.vehicles.fractionOfPeopleWithBicycle = 0.085

beam.agentsim.agents.vehicles.fractionOfInitialVehicleFleet = 1.4

beam.calibration.google.travelTimes.enable = false
beam.calibration.google.travelTimes.numDataPointsOver24Hours = 500
beam.calibration.google.travelTimes.iterationInterval = 10

beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 3.1
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = -0.25
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = -2
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = -3
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_transit_intercept = -3
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = -0.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = -20
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_pooled_intercept = -20

beam.exchange.scenario.urbansim.activitySimEnabled = true

beam.agentsim.agents.tripBehaviors.mulitnomialLogit.generate_secondary_activities = true
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.intercept_file_path = ${beam.inputDirectory}"/activity-intercepts-35620.csv"
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.activity_file_path = ${beam.inputDirectory}"/activity-params-35620.csv"
# negative means - less secondary activity trips
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.additional_trip_utility = 3.5
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.max_destination_distance_meters = 16000 # experiment 1 => 33k
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.max_destination_choice_set_size = 6     # experiment 2 => 3
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.destination_nest_scale_factor = 1.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.mode_nest_scale_factor = 1.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.trip_nest_scale_factor = 1.0

beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transit_crowding_VOT_multiplier = 15
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transit_crowding_VOT_threshold = 0.1

beam.router.skim.transit-crowding-skimmer.writeFullSkimsInterval = 10
beam.physsim.writeRouteHistoryInterval = 10

beam.agentsim.agents.modalBehaviors.transitVehicleTypeVOTMultipliers = ["BUS-DEFAULT:0.75","SUBWAY-DEFAULT:1.3"]

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  r5 {
    directory2 = ${beam.inputDirectory}"/r5-prod-no-buses"
  }
}

#
# the rest of parameters
#

beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.timeBinSize = 3600
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "60:00:00"
beam.agentsim.schedulerParallelismWindow = 150
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.modeVotMultiplier.rideHailPooled = 1.0

beam.agentsim.agents.parking.mulitnomialLogit.params.distance_multiplier = 1.0
beam.agentsim.agents.parking.mulitnomialLogit.params.installed_capacity_multiplier = 0.001
beam.agentsim.agents.parking.mulitnomialLogit.params.parking_costs_price_multiplier = 4.5
beam.agentsim.agents.modalBehaviors.lccm.filePath = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.modeIncentive.filePath = ${beam.inputDirectory}"/incentives.csv"
beam.agentsim.agents.ptFare.filePath = ${beam.inputDirectory}"/ptFares.csv"
beam.agentsim.agents.plans {
  inputPlansFilePath = ${beam.inputDirectory}"/sample/1k/population.xml.gz"
  inputPersonAttributesFilePath = ${beam.inputDirectory}"/sample/1k/populationAttributes.xml.gz"
}
beam.agentsim.agents.households {
  inputFilePath = ${beam.inputDirectory}"/sample/1k/households.xml.gz"
  inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/sample/1k/householdAttributes.xml.gz"
}
#BeamVehicles Params
beam.agentsim.agents.population.useVehicleSampling = true
beam.agentsim.agents.vehicles.linkToGradePercentFilePath = ${beam.inputDirectory}"/r5-prod/linkToGradePercent.csv"
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vehicleTypes.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ${beam.inputDirectory}"/sample/1k/vehicles.csv.gz"
beam.agentsim.agents.vehicles.sharedFleets = []
#TAZ params
beam.agentsim.taz.filePath=${beam.inputDirectory}"/taz-centers.csv.gz"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/nyc-parking-base.csv"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
#Toll params
beam.agentsim.toll.filePath=${beam.inputDirectory}"/toll-prices.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
###########################
# Physsim
###########################
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/r5-prod/physsim-network.xml"
beam.physsim.storageCapacityFactor = 1.0
beam.physsim.writeEventsInterval = 1
beam.physsim.writePlansInterval = 0
beam.physsim.writeMATSimNetwork = true
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.linkStatsBinSize = 3600
beam.physsim.ptSampleSize = 0.03
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false
beam.physsim.jdeqsim.cacc.enabled = false
beam.physsim.quick_fix_minCarSpeedInMetersPerSecond = 1.3
beam.physsim.jdeqsim.cacc.minimumRoadSpeedInMetersPerSecond = 1.3
beam.physsim.events.fileOutputFormats = "xml.gz"

###########################
# Replanning
###########################
beam.replanning {
  maxAgentPlanMemorySize = 6
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.7
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.1
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.1
  Module_4 = "AddSupplementaryTrips"
  ModuleProbability_4 = 0.1
}

##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = false
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart.path = "https://s3.us-east-2.amazonaws.com/beam-outputs/run149-base__2018-06-27_20-28-26_2a2e2bd3.zip"

##################################################################
# RideHail
##################################################################
# Initialization Type(PROCEDURAL | FILE)
beam.agentsim.agents.rideHail.initialization.initType = "PROCEDURAL"
# If PROCEDURAL, use these params
# initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.home.radiusInMeters = 500
beam.agentsim.agents.rideHail.initialization.procedural.vehicleTypeId = "Car"
beam.agentsim.agents.rideHail.initialization.procedural.numDriversAsFractionOfPopulation = 0.01

# If FILE, use this param
beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"

# Ride Hailing General Params
beam.agentsim.agents.rideHail.refuelThresholdInMeters=1000.0
beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=5000
beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.waitingTimeInSec = 1200
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 300
# repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
beam.agentsim.agents.rideHail.repositioningManager.timeout=300
# DEMAND_FOLLOWING_REPOSITIONING_MANAGER
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=3.4
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
# REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true

##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/newyork"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
beam.outputs.events.eventsToWrite = "PersonArrivalEvent,PersonDepartureEvent,ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,ChargingPlugInEvent,ChargingPlugOutEvent,ParkingEvent,LeavingParkingEvent,PersonCostEvent"
beam.outputs.stats.binSize = 3600

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 5
beam.beamskimmer.writeObservedSkimsInterval = ${beam.outputs.defaultWriteInterval}
beam.beamskimmer.writeAllModeSkimsForPeakNonPeakPeriodsInterval = 0
beam.beamskimmer.writeObservedSkimsPlusInterval = ${beam.outputs.defaultWriteInterval}
beam.beamskimmer.writeFullSkimsInterval = 0
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = 10
beam.physsim.writePlansInterval = 10
beam.physsim.writeRouteHistoryInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.linkStatsWriteInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.generalizedLinkStatsInterval = ${beam.outputs.defaultWriteInterval}

beam.outputs.generalizedLinkStats.startTime = 0
beam.outputs.generalizedLinkStats.endTime = 108000
beam.outputs.stats.binSize = 3600

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = false
beam.debug.actor.logDepth = 0

beam.debug.stuckAgentDetection {
  checkIntervalMs = 200
  checkMaxNumberOfMessagesEnabled = true
  defaultTimeoutMs = 60000
  enabled = false
  overallSimulationTimeoutMs = 100000
  thresholds = [
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
        rideHailAgent = 1
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.InitializeTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 11
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
    }
  ]
}



##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:32118" # old -> "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  transitOnStreetNetwork = true
  baseDate = "2020-02-19T00:00:00-05:00"
  r5 {
    directory = ${beam.inputDirectory}"/r5-prod"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5-prod/newyork-big-filtered.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5-prod/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
  }
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "CountsObjectiveFunction"
beam.calibration.mode.benchmarkFilePath=${beam.inputDirectory}"/calibration/benchmark.csv"
beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 1
  averageCountsOverIterations = 1
  inputCountsFile = ${beam.inputDirectory}"/counts/fall_2015_wed_filtered.xml"
}

beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "generic"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/generic_scenario/1049k-NYC-related/"
  convertWgs2Utm = true
}

beam.calibration.studyArea {
  enabled = true
  lat = 40.715076
  lon = -73.991180
  radius = 30000
}

beam.physsim.network.overwriteRoadTypeProperties {
    enabled = true

    unclassified { speed = 11.26538 }

    elevator { speed = 26.15184 }
    trafficIsland { speed = 26.15184 }
    motorway { speed = 26.151775 }
    primary { speed = 26.151775 }
    trunk { speed = 24.1401 }
    secondary { speed = 24.1401 }
    tertiary { speed = 22.128425 }
    motorwayLink { speed = 20.11675 }
    primaryLink { speed = 19.61383125 }
    secondaryLink { speed = 15.932466 }
    trunkLink { speed = 15.0875625 }
    tertiaryLink { speed = 14.6047605 }
    track { speed = 11.26538 }
    steps { speed = 11.26538 }
    road { speed = 11.26538 }
    residentialLink { speed = 11.26538 }
    access { speed = 11.26538 }
    bridleway { speed = 11.26538 }
    pedestrian { speed = 11.26538 }
    path { speed = 11.26538 }
    footway { speed = 11.26538 }
    escalator { speed = 11.26538 }
    disused { speed = 11.26538 }
    cycleway { speed = 11.26538 }
    crossing { speed = 11.26538 }
    corridor { speed = 11.26538 }
    busStop { speed = 11.26538 }
    residential { speed = 10.058375 }
    livingStreet { speed = 10.058375 }
}

#beam.urbansim.allTAZSkimsWriteInterval = 1
#beam.urbansim.allTAZSkimsPeakHour = 8.5

beam.outputs.writeR5RoutesInterval = 1
beam.debug.writeModeChoiceAlternatives = true

beam.physsim.overwriteLinkParamPath = ${beam.inputDirectory}"/updatedLinkParams.csv"